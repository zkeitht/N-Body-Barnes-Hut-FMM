# real functions (for BH)
import numpy as np

def potential(source, target_coords):
    """Returns potential at a target induced by a source, using 
    real coords.
    
    Arguments
    ---------
    source: object with coords and q attribute.
    target: array of coords, or object with coords attrtibute.
    form:
    Ï† := q*log(|r|) where r is the target-source distance.
    """
    if hasattr(target_coords, 'coords'):
        target_coords = target_coords.coords
    return source.q * np.log(source.distance(target_coords))

def grid_direct_sum(grid):
    """Calculates the real potential generated by all particles in a grid evaluated
    at where all the particles are by direct summation.

    The potential of each of the particles is stored in the phi attribute of 
    the particles.
    """
    grid.clear_all_phi()
    particles = grid.particles
    for i, target in enumerate(particles):
        for source in (particles[:i] + particles[i+1:]):
            target.phi += potential(source, target.coords)

def direct_source_target(sources, targets):
    """Calculates the potential induced by a group of SOURCE particles, 
    evaluated at each of the TARGET particles, using direct summation method.

    The potential evaluated at each of the TARGET particles is stored in the 
    phi attribute of the TARGET particles.

    Interactions within the source group and within the target group are ignored.
    
    Arguments:
    ----------
        sources: list of source particles
        targets: list of target particles (phi attribute will be updated)
    """
    for target in targets:
        for source in sources:
            target.phi += potential(source, target.coords)

def boxsize_to_level(boxsize, gridsize):
    """Converts boxsize to the level it belongs to."""
    return int(np.log2(gridsize/boxsize))